Java Script는 독자적인 영역을 갖고 있다.
===============
- 보드를 받으면 특정 메모리에 직접 접근해야 하는데[그걸  해야 LED 불킬수있어] 이걸 하기 위해서는 C언어를 해야해

- 객체지향 java, c#
 
- 자바스크립트의 목적은 웹을 움직이게 만드는 것 (버튼눌림)

- 
단순 display	html은 뼈대
		CSS를 개입하면 이뻐져
----                   ----
움직임		java script가 개입하게 되면 작동하게 된다.

- 요새는 브라우저가 없으면 print를 사용할 수 없어. 브라우저 종속적인 언어야.

- Html[마크업언어]와 CSS[스타일시트언어]는 언어야. 프로그래밍 언어가 아니야.

- JS는 프로그래밍 언어야. 

-  ajax는 데이터가 바뀔 때, 새로고침을 하지 않고 변동된 부분만 가져와서 바꿔주는것 이다.

- node.js는 컴퓨터에 설치할 수 있는 자바스크립트

- 브라우저는 기본적으로 JS를 갖고 있다.

- Vscode로 코딩을 해. 그리고 복사한 뒤, 브라우저에서 붙여
*** 새로고침 ****
[1. 개발자 도구 열기 2. 새로고침에서 마우스 우클릭 3. 캐시 비우기 및 강력새로고침을 누른다.]
======
javascript
======
======
문법
======
- 프린트 console.log(); [입력후 하기의 undefined는 무시]

- alert("HI") 이렇게 치면 경고창이 뜨고 ()안에 있는 경고문구가 뜨게 된다. 여기에 세미콜론은 붙이는게 맞다. 이게 어디에 써야하는지 때에 따라 다르기 때문에 vscode에서 프리티어 (알트 쉬프트 F누르면 된다.) 사용하면 ;를 사용한다.

- typeof(a); 는 타입을 알게 하는거야.



- JS는 변수선언을 해도 그만 안해도 그만인데, 해야 돼 
declaration
declare

- 선언은 내가 이걸 쓰겠다고 말하는 것. int a;
  변수는 메모리의 주소
  배정 = assign[assignment] a=1;
  int나 char이런건 사이즈를 잡아주는거야. [int a=10; 라고 하면 a라는것의 사이즈를 int만큼 잡아달라는 의미]
  변수의 값을 지정하는 것은 초기화라고 한다(initialize)
  앞으로는 바로 선언할 때, 바로 초기화 시켜야 해. ex) int a; a=0; (X) int a=0;(O) [초기화 = 선언 + 배정]
 
- JS에서 변수선언 방법은 하기와 같이 총 3개
const
let
var
웹은 업데이트된다고 이전 문법을 갈아엎지는 않아 이전것도 작동되어야 하거든.
그래서 업데이트 될 때는 deprecated 된다. [deprecated, 지원은 하는데 권장하진 않아.]

- 1순위로 const를 사용한다.
1. JS에서는 자료형 타입을 붙이지 않아(int, string, char 등) 타입은 있긴 있는데, 초기화를 끝내야만 결정된다. 그래서, 하기와 같이 초기화시킨다.

	const a=1;

2. 언어에서 한번 선언한 변수는 다시 선언하면 안된다. 다른 언어에서 Error야. 하기와 같이 작성하면 에러가 되어야 해. 근데, var을 쓰면 사용이 된다. 언어학적으로 안되야 하는데 돼. 그래서 이걸 고치기 위해서 const, let이 개발되었다. var은 언어학적으로 잘못되었기 때문에 안써야 해.

     	var a=1;
   	var a=2;
또한, a=1; 과 같이 선언이 안된것도 작동이 된다. 근본이 없는 언어다. 되지만 이렇게 쓰지 말아라. 

하지만, 하기와 같이 const를 사용하면 에러가 뜬다. 이게 정상이다.
	const a=1;
	const a=2;
	const 한번 초기화된 값은 변경할 수 없다. 즉, 상수변수다. 
	[constant variable] 근데, 배열과 객체는 바꿀 수 있다. 그래서 상수변수라고 부른다.
	
	i, idx, flag 등과 같이 값이 변해야 하는 상황이 있다. 이럴 때, let을 사용한다.


const/let는 블랙레벨 스코프다. {}안에 선언되면 거기서만 사용할 수 있다. 하기와 같이 사용하면 에러가 뜬다.
	{
	const a=5;
	}
	console.log(a);

- var은 함수레벨 스코프다
함수레벨 스코프 = 함수 내에서 선언된 함수는 함수 내에서만 유효하다. 하기와 같을 때, function외에서는 var로 초기화된 값 사용불가.
	
	function(){
	var = 0;
	}

- 자바스크립트는 2가지로 나뉘어져 있다.
	1. 원시 자료형

	2. 참조 자료형
	
	하기 찍어보면 타입을 이해할 수 있다.

	console.log(typeof(1));
	console.log(typeof(-1));
	console.log(typeof(3.14));
	console.log(typeof(""));
	console.log(typeof("a"));
	console.log(typeof("랄랄라"));
	console.log(typeof(true));
	console.log(typeof("true"));


- null
개발자가 의도하고 비운거야.
- undefined
개발자의 의도하지 않게 비운 값. 서버와 통신할 때 이런 에러가 발생할 수 있다.

- Array
[] 로 표기한다.
	const a = [1,2,3,4]
	a[i]

배열일 때는, for문돌릴 필요 없이 전부 하기와 같은 방식으로 출력할 수 있다. 
	console.log(a)
크기, 배열안의 값이 나온다
      ex)	(3) [1, 2, 3]



===
함수
===
- 함수(Function)는 "기능" 이다. 우리가 아는 수학적 개념의 함수와는 전혀 다르다.

- 함수 이름은 무조건 소문자로 작성해야 한다. 하기와 같이 카멜 케이스로 작성한다.

...		function camelCase(){
[함수선언 구역]
...		}
[함수실행 영역]	camelCase();

- 하기와 같이 main문에서 소괄호는 "실행"을 한다는 의미를 갖고 있다. 
	small()	


- 하기와 같이 함수의 ()는 실행의 의미는 아니다. 특정 값을 입력받는 것.
	function small(){
	
	}

---
함수선언		function smapleFunc(a)  #이렇게 하면 a = 1로 초기화 시킨것.
			console.log(a); # 리턴
---
		sampleFunc(1); #해당 함수에 1을 입력


**지역변수**
- 함수영역 내에 존재하는 변수 즉, 함수 안에서만 사용할 수 있다. 그래서 하기와 같이 func안에 적어놓으면 외부에서는 b를 사용할 수 없어. Error야.

		function sample(){
		const b=2;          #함수 내 변수
		}
		console.log(b);     #함수 외 구간에서 변수사용 불가, error


- 함수 안에서 파라미터로 "배열 또는 객체를 받을 때, 조심해라." 의도치않은 결과가 발생할 수 있다. 하기와 같은 예제야. 주소값이 넘어가서 주소를 받았기 때문에 하기와 같은 코드가 발생할 수 있다.

		function sampleFunc(a){
		a.push(4);

		}
		const a = [1,2,3];
		sampleFunc(a);

		console.log(a);

차라리 배열과 객체가 있을 때는 하기와 같이 전역변수를 지정하고 사용하라.
		
		const a = [1,2,3];

		function sampleFunc(){
		a.push(4);

		}

		sampleFunc();

		console.log(a);


- 전역변수
함수영역 외에도 존재하는 변수



- 리턴은 함수 내에서 결과값이 있으면 내보내는 역할을 한다.

		const a = 1;
		const b = 2;
		function sampleFunc(a, b) {
		  return a + b;           #리턴, sampleFunc을 실행하면 a+b라는 값을 리턴한다.
		}
		const result = sampleFunc(a, b);
		console.log(result);
		//console.log(sampleFunc(a,b)); # 이렇게 작성해도 작동된다. 바로 상기 2줄과 같은 역할
					   # sampleFunc(a,b) 얘의 타입은 number		
					   # JS에서는 함수를 출력할 수 있다, Call back 함수

- 하기와 같이 함수를 변수로 선언할 수 있다. 즉, JS에서 함수는 변수다. 함수도 하나의 타입이다. 이래서 함수가 함수의 파라미터로 들어갈 수 있다.

		const sampleFunc = function () {  #원래 function 오른쪽에 함수 이름이 있어야 하잖아?
		  console.log("랄라");		그건 앞에 sampleFunc에 있다.
		};                                         # 여기에 세미콜론이 필요해 
		sampleFunc();

- JS에서는 함수의 이름을 안만들어도 돼. 다른언어에서의 함수는 "재사용" 가능한 기능이다. 근데 JS에서 함수의 "재사용"은 선택이다.
- 타입 변환할때는 첫글자 대문자로 써야 해.
- 함수 받을때는 const로 쓰는 게 원칙이야.

- 호이스팅 : 런타임 이전에 변수의 "선언문"들 만 먼저 끌어져 올라오는 행위
	let, const는 hoisting을 막는다.  #더 안전하다.
	* 함수 호이스팅 관련 무언가도 있는데 그냥 코딩습관 똑바로 하면 문제없어.

- prompt는 입력받을 때, 사용한다. 실제로는 사용하지 않지만, 코테볼때 사용한다. 하기와 같이 사용하면 입력창이 출력된다.
		var txt = prompt("입력하시오");
		console.log(txt);
	
- ECMAScript 이라는 단어는 외워라, 줄여서 ES
ECMA 국제기구에서 만든 Script 언어 기준, ES 라고 부른다. 즉, 명세서야. 
자바스크립트가 아니라. 그리고 이것을 기반으로 브라우저 (chrome, safari, google)등등 에서 JS를 만든다.

===
객체
===
- JS에서 가장 중요하다고 생각하는 3가지
1. function [함수]
2. object [객체] [*]
3. array [배열]

- JS에서 배열크기를 선언하지 않아. 그리고 배열안에 여러가지 타입을 할 수 있는데, 이렇게 하지말고 하나의 타입만을 가지고 해라.
ex) [1,2,"나"] 이렇게 쓰지 말아라.

- 객체는 하기와 같이 중괄호다. 객체 (object) 는 키(key)와 값(value) 로 이루어진 프로퍼티(property. 속성) 의 모음이다.
앞의 userName, job, isMarriged가 Key, [이 세가지의 순서는 의미가 없다.]
		const info = {
  		userName: "이자룡", #userName = key, "이자룡" = value, userName  "이자룡" = property
  		job: "싸피강사",
  		isMarriged: true,
		};


- 메서드는 객체안에 있는 함수

		const family = ["아빠", "엄마", "실비"];
		const info = {
  		userName: "이자룡",
  		job: "싸피강사",
  		isMarriged: true,
  		family: family,
  		myStack: {
    		  fronted: "Vue.js",
  		  backend: "mode.js",
  		 },
		  add: function () {
		    return a + b;
  		},
		};

- 배열안의 객체, front 와 back 간 통신의 기본 원칙이야.

		const people = [
		  {
		    name: "jony",
		    age: 44,
		  },
		  {
		    name: "sylvie",
		    age: 26,
		  },
		  {
		    name: "nana",
		    age: 4,
		  },
		];

**length는 문자열과 배열에 둘 다 쓸 수 있어. 이거쓸때는 소괄호 사용하지 마.**

- 하기와 같이 비교하면 문자열과 숫자임에도 true가 출력된다.

		const a = 1;
		const b = "1";
		console.log(a == b);

비교하려면 === 이렇게 세개를 사용한다.
		const a = 1;
		const b = "1";
		console.log(a === b); # 다를때는 (a!===b)

- const가 배열과 객체에서는 변경 추가 삭제가 가능 그러나 새로 초기화 하는것은 안된다.

- 배열 이어붙이기
		const arr1 = [1, 2, 3];
		const arr2 = [4, 5, 6];
방법 1번째	const result = arr1 + arr2;
		console.log(result);

		const result2 = arr1.concat(arr2);
방법 2번째	console.log(result2);

=======
DOM 제어
=======
Document Object Model
HTML 문서의 구조적 표현방법
웹브라우저가 HTML 문서를 읽고, DOM Tree를 생성한다.
- HTML : 문서

consol. dir == 객체를 보는것 

html은 하나의 거대한 객체야

특정 Key에 접근해서 수치를 추가 삭제 수정이 가능한데, 그 행동을 DOM조작이라고 한다.
DOM조작을 하기위한 JS가 사용되는것.

script을 작성하는 위치는 </body바로 위지점> 위에다가 적어도 아예 안되는건 아닌데 원칙상 위에서부터 밑에서 읽기 때문에 html을 다 읽고나서 script쓰라고 저 순서대로 쓰는 것. 만약 위에 쓰고 싶다면

콘솔로그가 찍히는 것은 개발자 도구에 찍히는 것.




**바꾸는거**
const lalalas = document.querySelectorAll(".lalala");
console.log(lalalas[0].textContent);
console.log(lalalas[1].textContent);
console.log(lalalas[2].textContent);

for (let i = 0; i < 3; i++) {
  document.querySelectorAll(".lalala")[i].textContent = "yes";
  lalalas[i].textContent = "yes";
}





=====
이벤트
=====
이벤트 = function 얘로 받아야해.
이벤트의 대표적인 예는 클릭!
사건은 함수

함수가  없으면 html은 전시장이야. 근데 함수를 달아놓으면 클릭을 할 떄 그 함수를 실행시키게 되는것.
즉, 콘솔로그를 찍거나 글자를 바꾸거나 할 수 있는거야. 이게 js의 근본이야.

- button만 만들었다고 클릭이 이루어지지 않아. 함수를 통해서 button의 의미를 부여할 것.
[버튼은 웬만하면 클래스 지정해]
추가적으로 function.js를 만들고 여기와 연결을 해놓게 만들어야해
document.quarrySelector 쓰면 된다. [쿼리셀렉터는 가지고 오는것.]

가져온다음에 콘솔로 찍는 연습을 해.

js에는 카멜이 기본이야. html에서는 a-b가 기본

우선, 버튼을 만드는 총정리방법
1. html에 버튼을 만든다.
1_1. js를 만들고 function을 만든다.
2. </body>위에 script 에 만들고 js주소와 연결시킨다.
3. 하기의 1번과 같이 연결시켜 주고 2번에서와 같이 click한다는 것과 함께 showAlert를 해주면 된다.
		function showAlert() {
		  alert("야호");
		}
	1.	const sampleBtn = document.querySelector(".sample-btn");
	2.	sampleBtn.addEventListener("click",showAlert);	

상기에서 밖에 선언된 함수가 아니라 하기와 같이 안에서 사용할 수 있다.

		const sampleBtn = document.querySelector(".sample-btn");
		sampleBtn.addEventListener("click", function () {
		  alert("haha");
		});

button이라고 했지만, button은 편의상의 UI야. 일반 text 형식으로(div형태) 작성이 되어도, 클릭은 그대로 작동된다.


Callback function
함수안에 파라미터로 들어가는 함수를 콜백함수라고 한다. 콜백함수는 특정 조건을 만족시킬때까지 기다리다가, 조거을 만족시키면 동작한다.



==========
createElement
==========
 createElement는 함수야.







=======
=======












==========
코드 쓸 때 순서
==========
1. 전역번수
2. 함수
3. 실행문












자리봉 국밥
알고리즘 틈틈히 하자!






































==
tip
== 
로그인 만들지 마.

























